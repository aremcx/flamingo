//
//  TypingDNAAPI.swift
//  flamingo
//
//  Created by RÄƒzvan-Gabriel Geangu on 20/10/2020.
//

import Foundation

let kApiKey = "ce1475182ff875a47811ff880e6ee886"
let kApiSecret = "dbd2ea1f330a50493fac3031e17a2055"
let kApiAuthentication = "Basic \("\(kApiKey):\(kApiSecret)".data(using: .utf8)!.base64EncodedString())"

struct RegisterAPIResponse: Codable {
    var message: String
    var message_code: Int
    var status: Int
    var success: Int
}

struct VerifyAPIResponse: Codable {
    var message: String
    var message_code: Int
    var status: Int
    var success: Int
    var result: Int
    var score: Int
    var confidence_interval: Int
    var confidence: Int
    var net_score: Int
    var device_similarity: Int
    var positions: [Int]
    var compared_samples: Int
    var action: String
    var previous_samples: Int
}

class TypingDNAAPI: NSObject {
    static let shared = TypingDNAAPI()
    
    private func initRequest(_ route: String) -> URLRequest {
        /// Set up request defaults
        var request = URLRequest(url: URL(string: "https://api.typingdna.com\(route)")!)
        request.httpMethod = "POST"
        request.setValue(kApiAuthentication, forHTTPHeaderField: "Authorization")
        request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
        
        return request
    }
    
    /// This function takes typingPattern string generated by the recorder as an argument
    /// It uses the API from **TypingDNA** to register a person
    /// @see *Save typing pattern* from documentation
    func register(typingPattern: String, id: String) {
        var request = initRequest("/save/\(id)")
        
        /// Set up data
        request.httpBody = "tp=\(typingPattern)".data(using: .utf8)
        
        /// Call for response
        URLSession.shared.dataTask(with: request) { (data, response, error) in
            if let data = data {
                guard let model = try? JSONDecoder().decode(RegisterAPIResponse.self, from: data) else { return }
                print(model.message == "Done")
            }
        }.resume()
    }
    
    /// This function takes typingPattern string generated by the recorder as an argument
    /// It uses the API from **TypingDNA** to identify a person
    /// @see *Verify typing pattern* from documentation
    func identify(typingPattern: String, id: String, didVerify: @escaping (_ model: VerifyAPIResponse) -> Void) {
        var request = initRequest("/verify/\(id)")
        
        /// Set up data
        request.httpBody = "tp=\(typingPattern)&quality=1".data(using: .utf8)
        
        URLSession.shared.dataTask(with: request) { (data, response, error) in
            if let data = data {
                guard let model = try? JSONDecoder().decode(VerifyAPIResponse.self, from: data) else { return }
                didVerify(model)
            }
        }.resume()
    }
}
